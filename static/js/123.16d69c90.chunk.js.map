{"version":3,"file":"static/js/123.16d69c90.chunk.js","mappings":"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","sources":["components/movie-list/MovieList.jsx","components/search-form/SearchForm.jsx","pages/SearchMovie.jsx","services/ApiRequests.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport default function MoviesList({ data }) {\n  const location = useLocation();\n  return (\n    <>\n      <ul>\n        {data.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                <h3>{movie.title}</h3>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nMoviesList.propTypes = {\n  location: PropTypes.object,\n};\n","import PropTypes from 'prop-types';\n\nexport const SearchForm = ({ fnOnFormSubmit, fnOnChange, value }) => {\n  const handleSubmit = event => {\n    fnOnFormSubmit(event);\n  };\n  return (\n    <form\n      className=\"form\"\n      onSubmit={handleSubmit}\n      onChange={e => fnOnChange(e.target.value)}\n      value={value}\n    >\n      <input\n        id=\"input\"\n        className=\"input\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n      />\n      <SubmitBtn />\n    </form>\n  );\n};\n\nexport const SubmitBtn = () => (\n  <button type=\"submit\" className=\"button\">\n    Search\n  </button>\n);\n\nSearchForm.propTypes = {\n  handleSubmit: PropTypes.func,\n  fnOnFormSubmit: PropTypes.func,\n  fnOnChange: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\n\nimport { searchMovie } from '../services/ApiRequests';\nimport { SearchForm } from 'components/search-form/SearchForm';\nimport MoviesList from '../components/movie-list/MovieList';\n\nimport { useSearchParams } from 'react-router-dom';\n\nexport default function SearchMovieByWord() {\n  const [data, setData] = useState([]);\n  const [requestedWord, setRequestedWord] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('name') ?? '';\n\n  const updateQueryString = name => {\n    const newParams = name !== '' ? { name } : {};\n    setSearchParams(newParams);\n    setRequestedWord(newParams);\n  };\n\n  const getWordFromInput = event => {\n    event.preventDefault();\n    setData([]);\n    const form = event.currentTarget;\n    const searchWord = form.elements.input.value;\n    setRequestedWord(searchWord);\n    form.reset();\n  };\n\n  useEffect(() => {\n    if (requestedWord || movieName !== '') {\n      searchMovie(movieName || requestedWord)\n        .then(data => {\n          setData(data.results);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }, [requestedWord, movieName]);\n\n  return (\n    <>\n      <SearchForm\n        value={movieName}\n        fnOnFormSubmit={getWordFromInput}\n        fnOnChange={updateQueryString}\n      />\n      {data.length > 0 && <MoviesList data={data} />}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst apiKey = process.env.REACT_APP_API_KEY;\nconst API_URL = 'https://api.themoviedb.org/3';\n\nconst fetchData = async option => {\n  try {\n    const response = await axios.get(`${API_URL}${option}api_key=${apiKey}`);\n    const data = response.data;\n    return data;\n  } catch (error) {\n    console.log(error.message);\n    throw error;\n  }\n};\n\nconst getData = async option => {\n  try {\n    const data = await fetchData(option);\n    return data;\n  } catch (error) {\n    console.log(error.message);\n    throw error;\n  }\n};\n\nexport const getTrending = () => {\n  const getTrendingURL = '/trending/movie/day?';\n  return getData(getTrendingURL);\n};\n\nexport const searchMovie = movie => {\n  const searchMovieURL = `/search/movie?query=${movie}&`;\n  return getData(searchMovieURL);\n};\n\nexport const getMovieDetails = id => {\n  const getMovieDetailsURL = `/movie/${id}?`;\n  return getData(getMovieDetailsURL);\n};\n\nexport const getMovieCredits = id => {\n  const getMovieCreditsURL = `/movie/${id}/credits?`;\n  return getData(getMovieCreditsURL);\n};\n\nexport const getMovieReviews = id => {\n  const getMovieReviewsURL = `/movie/${id}/reviews?`;\n  return getData(getMovieReviewsURL);\n};\n\nexport const getFullPosterURL = posterPath => {\n  if (!posterPath) {\n    return;\n  }\n  try {\n    const response = `https://image.tmdb.org/t/p/w500${posterPath}`;\n    return response;\n  } catch (error) {\n    return error(error.message);\n  }\n};\n"],"names":["MoviesList","_ref","data","location","useLocation","_jsx","_Fragment","children","map","movie","Link","to","concat","id","state","from","title","SearchForm","fnOnFormSubmit","fnOnChange","value","_jsxs","className","onSubmit","event","onChange","e","target","type","autoComplete","autoFocus","placeholder","SubmitBtn","SearchMovieByWord","_searchParams$get","_useState","useState","_useState2","_slicedToArray","setData","_useState3","_useState4","requestedWord","setRequestedWord","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","movieName","get","useEffect","searchMovie","then","results","catch","error","console","preventDefault","form","currentTarget","searchWord","elements","input","reset","name","newParams","length","apiKey","process","REACT_APP_API_KEY","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","option","response","_context","prev","next","axios","sent","abrupt","t0","log","message","stop","_x","apply","arguments","getData","_ref2","_callee2","_context2","_x2","getTrending","searchMovieURL","getMovieDetails","getMovieDetailsURL","getMovieCredits","getMovieCreditsURL","getMovieReviews","getMovieReviewsURL","getFullPosterURL","posterPath"],"sourceRoot":""}